# preenche_L10();
# convocados_1a  <<- do.call("rbind", list(aprovados_A0,
#                                          aprovados_L01,aprovados_L02,
#                                          aprovados_L05,aprovados_L06,
#                                          aprovados_L09,aprovados_L10,
#                                          aprovados_L13,aprovados_L14));
# lista_todos <<- lista_todos_original # recupera lista_todos
# # } # fim da ordem_1a
# ==============================================================================
# Roda funções ordem_1a até ordem_12b
{ # roda todas as ordens
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_1a(); convocados_1a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_2a(); convocados_2a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_3a(); convocados_3a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_4a(); convocados_4a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_5a(); convocados_5a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_6a(); convocados_6a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_7a(); convocados_7a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_8a(); convocados_8a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_9a(); convocados_9a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_10a(); convocados_10a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_11a(); convocados_11a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_12a(); convocados_12a$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_1b(); convocados_1b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_2b(); convocados_2b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_3b(); convocados_3b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_4b(); convocados_4b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_5b(); convocados_5b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_6b(); convocados_6b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_7b(); convocados_7b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_8b(); convocados_8b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_9b(); convocados_9b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_10b(); convocados_10b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_11b(); convocados_11b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
ordem_12b(); convocados_12b$nota %>% mean() # cria convocados
rm(list=ls(pattern="^aprovados")) # apaga aprovados
} # fim de todar todas as ordens
# ==============================================================================
# Análises
# Criar analise_vagas
mod<-c("A0","L01","L02","L05","L06","L09","L10","L13","L14")
#"total","pub","bxa","ppi","pcd")
codigo_das_ordens<-c(
paste(1:12,"a",sep=""),
paste(1:12,"b",sep=""))
nomes_das_ordens<-c(
paste("ordem_",1:12,"a",sep=""),
paste("ordem_",1:12,"b",sep=""))
analise_vagas <-data.frame(matrix(ncol = length(mod),
nrow = length(nomes_das_ordens)),
row.names=nomes_das_ordens)
colnames(analise_vagas) <- mod
# Preencher analise_vagas
# preencher apenas uma linha
# for (i in 1:9) {
#   analise_vagas["ordem_1a", mod[i]] <-
#     convocados_1a %>% filter(mod_ins == mod[i]) %>% nrow()
# }
# ------------------------------------------------------------------------------
# Preencher atual
analise_vagas["atual",1:9] <- nvagas
# analise_vagas["atual","total"] <- sum(nvagas)
# analise_vagas["atual","pub"] <- sum(nvagas[c(2:9)])
# analise_vagas["atual","bxa"] <- sum(nvagas[c(2,3,6,7)])
# analise_vagas["atual","ppi"] <- sum(nvagas[c(3,5,7,9)])
# analise_vagas["atual","pcd"] <- sum(nvagas[c(6:9)])
# ------------------------------------------------------------------------------
# Preencher ordens 1a até 12b
# Create an empty data frame with the appropriate column names and row names
analise_vagas <- data.frame(matrix(nrow=24, ncol=9))
colnames(analise_vagas) <- mod
row.names(analise_vagas)<-c(paste("ordem_",1:12,"a",sep=""),
paste("ordem_",1:12,"b",sep=""))
# preencher 1a até 12a
# Loop through each value of k and modify the appropriate values in analise_vagas
for (k in 1:12) {
a_value <- paste0(k, "a")
convocados <- get(paste0("convocados_", a_value))
for (i in 1:9) {
analise_vagas[paste0("ordem_", a_value), mod[i]] <- convocados %>% filter(mod_ins == mod[i]) %>% nrow()
}
}
# preencher 1b até 12b
# Loop through each value of k and modify the appropriate values in analise_vagas
for (k in 1:12) {
b_value <- paste0(k, "b")
convocados <- get(paste0("convocados_", b_value))
for (i in 1:9) {
analise_vagas[paste0("ordem_", b_value), mod[i]] <- convocados %>% filter(mod_ins == mod[i]) %>% nrow()
}
}
# PARECE QUE ATÉ AQUI ESTÁ FUNCIONANDO CORRETAMENTE
# Até aqui tá ok
# there be monsters ahead
#
# ------------------------------------------------------------------------------
# preencher para todas as linhas:
# total de vagas preenchidas por grupo social
for (i in 1:24){
analise_vagas$tot[i] <- sum(analise_vagas[i,1:9])
analise_vagas$pub[i] <- sum(analise_vagas[i,2:9])
analise_vagas$bxa[i] <- sum(analise_vagas$L01[i],
analise_vagas$L02[i],
analise_vagas$L09[i],
analise_vagas$L10[i])
analise_vagas$ppi[i] <- sum(analise_vagas$L02[i],
analise_vagas$L06[i],
analise_vagas$L10[i],
analise_vagas$L14[i])
analise_vagas$pcd[i] <- sum(analise_vagas$L09[i],
analise_vagas$L10[i],
analise_vagas$L13[i],
analise_vagas$L14[i])
}
analise_vagas$nota <- 0
# ------------------------------------------------------------------------------
# preencher nota média
# para uma ordem
convocados_1a$nota %>% mean() -> analise_vagas["ordem_1a","nota"]
# para ordens 1a até 12a
for (i in 1:12) {
ordem_value <- paste0(i, "a")
convocados <- get(paste0("convocados_", ordem_value))
analise_vagas[paste0("ordem_", ordem_value), "nota"] <- convocados$nota %>% mean()
}
# para ordens 1b até 12b
for (i in 1:12) {
ordem_value <- paste0(i, "b")
convocados <- get(paste0("convocados_", ordem_value))
analise_vagas[paste0("ordem_", ordem_value), "nota"] <- convocados$nota %>% mean()
}
# ==============================================================================
# Exportar tabelas de analise
# criar de curso arbitrário
# analise_PEDAGOGIA <- analise_vagas
# criar analise_CURSO a partir do curso que estiver em lista_todos
eval(parse(text=(paste("analise_",lista_todos$Curso[1],"<- analise_vagas",
sep=""))))
# ==============================================================================
# Arquivo: analysis_04_preenche_listas_mult.R
# Roda modelo de listas múltiplas de preenchimento de vagas
# (também chamado concorrência separada)
# Cada candidato só preenche vaga da modalidade em que ele se inscreveu
# Modificado em 2023-02-13.
# Autor: Mateus Silva Figueiredo
# ==============================================================================
# Preparação
library(dplyr)
# Inputs necessários. Devem ser TRUE:
exists("dados_MEDICINA_2019")
exists("dados_PEDAGOGIA_2019")
exists("nvagas")
# ==============================================================================
# Preenche concorrência separada
# Criar funções preenche_ mod _ c1 (c1 = concorrencia simples, modelo c1)
# ------------------------------------------------------------------------------
{ # começa a criar todas as funcion preenche mod c1
preenche_A0_c1<-function(){
# Cria aprovados_A0
aprovados_A0 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_A0))
colnames(aprovados_A0) <<- colnames(lista_todos)
# Preenche aprovados_A0
lista_todos %>% subset(mod_ins=="A0") %>% slice_head(n=nvagas_A0) ->> aprovados_A0
aprovados_A0$mod_con <<- "A0"
# Atualiza lista_todos removendo presentes em aprovados_A0
subset(lista_todos, !id %in% aprovados_A0$id) ->> lista_todos
}# fim da function
# ------------------------------------------------------------------------------
preenche_L01_c1<-function(){
# Cria aprovados_L01
aprovados_L01 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_L01))
colnames(aprovados_L01) <<- colnames(lista_todos)
# Preenche aprovados_L01
lista_todos %>% subset(mod_ins=="L01") %>%slice_head(n=nvagas_L01) ->> aprovados_L01
aprovados_L01$mod_con <<- "L01"
# Atualiza lista_todos removendo presentes em aprovados_L01
subset(lista_todos, !id %in% aprovados_L01$id) ->> lista_todos
}# fim da function
# ------------------------------------------------------------------------------
preenche_L02_c1<-function(){
# Cria aprovados_L02
aprovados_L02 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_L02))
colnames(aprovados_L02) <<- colnames(lista_todos)
# Preenche aprovados_L02
lista_todos %>% subset(mod_ins=="L02") %>% slice_head(n=nvagas_L02) ->> aprovados_L02
aprovados_L02$mod_con <<- "L02"
# Atualiza lista_todos removendo presentes em aprovados_L02
subset(lista_todos, !id %in% aprovados_L02$id) ->> lista_todos
}# fim da function
# ------------------------------------------------------------------------------
preenche_L05_c1<-function(){
# Cria aprovados_L05
aprovados_L05 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_L05))
colnames(aprovados_L05) <<- colnames(lista_todos)
# Preenche aprovados_L05
lista_todos %>% subset(mod_ins=="L05") %>%slice_head(n=nvagas_L05) ->> aprovados_L05
aprovados_L05$mod_con <<- "L05"
# Atualiza lista_todos removendo presentes em aprovados_L05
subset(lista_todos, !id %in% aprovados_L05$id) ->> lista_todos
}# fim da function
# ------------------------------------------------------------------------------
preenche_L06_c1<-function(){
# Cria aprovados_L06
aprovados_L06 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_L06))
colnames(aprovados_L06) <<- colnames(lista_todos)
# Preenche aprovados_L06
lista_todos %>% subset(mod_ins=="L06") %>%slice_head(n=nvagas_L06) ->> aprovados_L06
aprovados_L06$mod_con <<- "L06"
# Atualiza lista_todos removendo presentes em aprovados_L06
subset(lista_todos, !id %in% aprovados_L06$id) ->> lista_todos
}# fim da function
# ------------------------------------------------------------------------------
preenche_L09_c1<-function(){
# Cria aprovados_L09
aprovados_L09 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_L09))
colnames(aprovados_L09) <<- colnames(lista_todos)
# Preenche aprovados_L09
lista_todos %>% subset(mod_ins=="L09") %>%slice_head(n=nvagas_L09) ->> aprovados_L09
aprovados_L09$mod_con <<- "L09"
# Atualiza lista_todos removendo presentes em aprovados_L09
subset(lista_todos, !id %in% aprovados_L09$id) ->> lista_todos
}# fim da function
# ------------------------------------------------------------------------------
preenche_L10_c1<-function(){
# Cria aprovados_L10
aprovados_L10 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_L10))
colnames(aprovados_L10) <<- colnames(lista_todos)
# Preenche aprovados_L10
lista_todos %>% subset(mod_ins=="L10") %>%slice_head(n=nvagas_L10) ->> aprovados_L10
aprovados_L10$mod_con <<- "L10"
# Atualiza lista_todos removendo presentes em aprovados_L10
subset(lista_todos, !id %in% aprovados_L10$id) ->> lista_todos
}# fim da function
# ------------------------------------------------------------------------------
preenche_L13_c1<-function(){
# Cria aprovados_L13
aprovados_L13 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_L13))
colnames(aprovados_L13) <<- colnames(lista_todos)
# Preenche aprovados_L13
lista_todos %>% subset(mod_ins=="L13") %>%slice_head(n=nvagas_L13) ->> aprovados_L13
aprovados_L13$mod_con <<- "L13"
# Atualiza lista_todos removendo presentes em aprovados_L13
subset(lista_todos, !id %in% aprovados_L13$id) ->> lista_todos
}# fim da function
# ------------------------------------------------------------------------------
preenche_L14_c1<-function(){
# Cria aprovados_L14
aprovados_L14 <<- data.frame(matrix(ncol = ncol(lista_todos), nrow = nvagas_L14))
colnames(aprovados_L14) <<- colnames(lista_todos)
# Preenche aprovados_L14
lista_todos %>% subset(mod_ins=="L14") %>%slice_head(n=nvagas_L14) ->> aprovados_L14
aprovados_L14$mod_con <<- "L14"
# Atualiza lista_todos removendo presentes em aprovados_L14
subset(lista_todos, !id %in% aprovados_L14$id) ->> lista_todos
}# fim da function
} # fim de criar todas as function preenche_ mod _c1
# ==============================================================================
# remove objetos aprovados_, caso já existam
rm(list=ls(pattern="^aprovados_"))
# Rodar funções preenche_ mod _ c1 (c1 = concorrencia simples, modelo c1)
if(isFALSE(exists("aprovados_A0")))  {preenche_A0_c1()}
if(isFALSE(exists("aprovados_L01"))) {preenche_L01_c1()}
if(isFALSE(exists("aprovados_L02"))) {preenche_L02_c1()}
if(isFALSE(exists("aprovados_L05"))) {preenche_L05_c1()}
if(isFALSE(exists("aprovados_L06"))) {preenche_L06_c1()}
if(isFALSE(exists("aprovados_L09"))) {preenche_L09_c1()}
if(isFALSE(exists("aprovados_L10"))) {preenche_L10_c1()}
if(isFALSE(exists("aprovados_L13"))) {preenche_L13_c1()}
if(isFALSE(exists("aprovados_L14"))) {preenche_L14_c1()}
# cria objeto com todos os aprovados
aprovados <- do.call("rbind", list(aprovados_A0,
aprovados_L01,aprovados_L02,
aprovados_L05,aprovados_L06,
aprovados_L09,aprovados_L10,
aprovados_L13,aprovados_L14))
# ==============================================================================
# Análises
# Criar analise_vagas
mod<-c("A0","L01","L02","L05","L06","L09","L10","L13","L14")
#"total","pub","bxa","ppi","pcd")
analise_vagas <-data.frame(matrix(ncol = length(mod),
nrow = 1),
row.names="sisu_atual")
colnames(analise_vagas) <- mod
# Preencher analise_vagas 1:9
convocados_c1 <- aprovados
# preencher apenas uma linha
for (i in 1:9) {
analise_vagas["sisu_atual", mod[i]] <-
convocados_c1 %>% filter(mod_ins == mod[i]) %>% nrow()
}
# preencher total de vagas preenchidas por grupo social
for (i in 1){
analise_vagas$tot[i] <- sum(analise_vagas[i,1:9])
analise_vagas$pub[i] <- sum(analise_vagas[i,2:9])
analise_vagas$bxa[i] <- sum(analise_vagas$L01[i],
analise_vagas$L02[i],
analise_vagas$L09[i],
analise_vagas$L10[i])
analise_vagas$ppi[i] <- sum(analise_vagas$L02[i],
analise_vagas$L06[i],
analise_vagas$L10[i],
analise_vagas$L14[i])
analise_vagas$pcd[i] <- sum(analise_vagas$L09[i],
analise_vagas$L10[i],
analise_vagas$L13[i],
analise_vagas$L14[i])
}
# preencher nota média
# para uma linha
convocados_c1$nota %>% mean() -> analise_vagas[1,"nota"]
# ==============================================================================
# Atualizar tabelas de analise
if (lista_todos$Curso[1] == "MEDICINA"){
analise_MEDICINA <- rbind(analise_MEDICINA, analise_vagas)
}
if (lista_todos$Curso[1] == "PEDAGOGIA"){
analise_PEDAGOGIA <- rbind(analise_PEDAGOGIA, analise_vagas)
}
View(analise_MEDICINA)
View(analise_PEDAGOGIA)
save.csv(analise_PEDAGOGIA, analise_PEDAGOGIA.csv)
write.csv(analise_PEDAGOGIA, analise_PEDAGOGIA.csv)
?write.csv
write.csv(analise_PEDAGOGIA, "analise_PEDAGOGIA.csv")
write.csv2(analise_PEDAGOGIA, "analise_PEDAGOGIA.csv")
# write.csv2(analise_PEDAGOGIA, "analise_PEDAGOGIA.csv")
write.csv2(analise_MEDICINA, "analise_MEDICINAcsv")
# write.csv2(analise_PEDAGOGIA, "analise_PEDAGOGIA.csv")
write.csv2(analise_MEDICINA, "analise_MEDICINA.csv")
# ==============================================================================
# carregar biblioteca
library(dplyr)
getPermutations <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
# obter permutações
permutations<-getPermutations(c(1,2,4))
todas_as_ordens <- data.frame(matrix(ncol=12+9,nrow=6))
colnames(todas_as_ordens) <- c("bxa","ppi","pcd",
"A0",
"L01","L02","L05","L06",
"L09","L10","L13","L14",
"1o","2o","3o","4o","5o","6o","7o","8o","9o")
for (i in 1:6){
pub <- 0.1 # para que L05 fique perto de A0
bxa <- todas_as_ordens[i,1] <- permutations[i,1]
ppi <- todas_as_ordens[i,2] <- permutations[i,2]
pcd <- todas_as_ordens[i,3] <- permutations[i,3]
todas_as_ordens[i,4]  <- 0                       #A0
todas_as_ordens[i,5]  <- pub + bxa               #L01
todas_as_ordens[i,6]  <- pub + bxa + ppi         #L02
todas_as_ordens[i,7]  <- pub                     #L05
todas_as_ordens[i,8]  <- pub +     + ppi         #L06
todas_as_ordens[i,9]  <- pub + bxa       + pcd   #L09
todas_as_ordens[i,10] <- pub + bxa + ppi + pcd   #L10
todas_as_ordens[i,11] <- pub +           + pcd   #L13
todas_as_ordens[i,12] <- pub       + ppi + pcd   #L14
}
i<-1
for (i in 1:6){
todas_as_ordens[i,4:12][order(todas_as_ordens[i,4:12])] %>% colnames() %>% paste() ->
todas_as_ordens[i,13:21]
}
todas_as_ordens_2 <- todas_as_ordens[c(1:3,13:21)]
# obter permutações
permutations<-getPermutations(c(2,3,4))
todas_as_ordens <- data.frame(matrix(ncol=12+9,nrow=6))
colnames(todas_as_ordens) <- c("bxa","ppi","pcd",
"A0",
"L01","L02","L05","L06",
"L09","L10","L13","L14",
"1o","2o","3o","4o","5o","6o","7o","8o","9o")
for (i in 1:6){
pub <- 0.1 # para que L05 fique perto de A0
bxa <- todas_as_ordens[i,1] <- permutations[i,1]
ppi <- todas_as_ordens[i,2] <- permutations[i,2]
pcd <- todas_as_ordens[i,3] <- permutations[i,3]
todas_as_ordens[i,4]  <- 0                       #A0
todas_as_ordens[i,5]  <- pub + bxa               #L01
todas_as_ordens[i,6]  <- pub + bxa + ppi         #L02
todas_as_ordens[i,7]  <- pub                     #L05
todas_as_ordens[i,8]  <- pub +     + ppi         #L06
todas_as_ordens[i,9]  <- pub + bxa       + pcd   #L09
todas_as_ordens[i,10] <- pub + bxa + ppi + pcd   #L10
todas_as_ordens[i,11] <- pub +           + pcd   #L13
todas_as_ordens[i,12] <- pub       + ppi + pcd   #L14
}
i<-1
for (i in 1:6){
todas_as_ordens[i,4:12][order(todas_as_ordens[i,4:12])] %>% colnames() %>% paste() ->
todas_as_ordens[i,13:21]
}
todas_as_ordens_3 <- todas_as_ordens[c(1:3,13:21)]
# ------------------------------------------------------------------------------
todas_as_ordens <- rbind(todas_as_ordens_2,todas_as_ordens_3)
# obter permutações
permutations<-getPermutations(c(-1,-2,-4))
todas_as_ordens <- data.frame(matrix(ncol=12+9,nrow=6))
colnames(todas_as_ordens) <- c("bxa","ppi","pcd",
"A0",
"L01","L02","L05","L06",
"L09","L10","L13","L14",
"1o","2o","3o","4o","5o","6o","7o","8o","9o")
for (i in 1:6){
pub <- -0.1 # para que L05 fique perto de A0
bxa <- todas_as_ordens[i,1] <- permutations[i,1]
ppi <- todas_as_ordens[i,2] <- permutations[i,2]
pcd <- todas_as_ordens[i,3] <- permutations[i,3]
todas_as_ordens[i,4]  <- 0                       #A0
todas_as_ordens[i,5]  <- pub + bxa               #L01
todas_as_ordens[i,6]  <- pub + bxa + ppi         #L02
todas_as_ordens[i,7]  <- pub                     #L05
todas_as_ordens[i,8]  <- pub +     + ppi         #L06
todas_as_ordens[i,9]  <- pub + bxa       + pcd   #L09
todas_as_ordens[i,10] <- pub + bxa + ppi + pcd   #L10
todas_as_ordens[i,11] <- pub +           + pcd   #L13
todas_as_ordens[i,12] <- pub       + ppi + pcd   #L14
}
i<-1
for (i in 1:6){
todas_as_ordens[i,4:12][order(todas_as_ordens[i,4:12])] %>% colnames() %>% paste() ->
todas_as_ordens[i,13:21]
}
todas_as_ordens_m_2 <- todas_as_ordens[c(1:3,13:21)]
# obter permutações
permutations<-getPermutations(c(-2,-3,-4))
todas_as_ordens <- data.frame(matrix(ncol=12+9,nrow=6))
colnames(todas_as_ordens) <- c("bxa","ppi","pcd",
"A0",
"L01","L02","L05","L06",
"L09","L10","L13","L14",
"1o","2o","3o","4o","5o","6o","7o","8o","9o")
for (i in 1:6){
pub <- -0.1 # para que L05 fique perto de A0
bxa <- todas_as_ordens[i,1] <- permutations[i,1]
ppi <- todas_as_ordens[i,2] <- permutations[i,2]
pcd <- todas_as_ordens[i,3] <- permutations[i,3]
todas_as_ordens[i,4]  <- 0                       #A0
todas_as_ordens[i,5]  <- pub + bxa               #L01
todas_as_ordens[i,6]  <- pub + bxa + ppi         #L02
todas_as_ordens[i,7]  <- pub                     #L05
todas_as_ordens[i,8]  <- pub +     + ppi         #L06
todas_as_ordens[i,9]  <- pub + bxa       + pcd   #L09
todas_as_ordens[i,10] <- pub + bxa + ppi + pcd   #L10
todas_as_ordens[i,11] <- pub +           + pcd   #L13
todas_as_ordens[i,12] <- pub       + ppi + pcd   #L14
}
i<-1
for (i in 1:6){
todas_as_ordens[i,4:12][order(todas_as_ordens[i,4:12])] %>% colnames() %>% paste() ->
todas_as_ordens[i,13:21]
}
todas_as_ordens_m_3 <- todas_as_ordens[c(1:3,13:21)]
todas_as_ordens <- rbind(todas_as_ordens_2,todas_as_ordens_3,
todas_as_ordens_m_2,todas_as_ordens_m_3)
# Limpeza
rm(todas_as_ordens_2, todas_as_ordens_3,
todas_as_ordens_m_2,todas_as_ordens_m_3,
permutations)
View(todas_as_ordens)
# ------------------------------------------------------------------------------
# Exportar ordens
write.csv2(todas_as_ordens,"todas_as_ordens.csv")
nrow(todas_as_ordens) <- c(paste(1:12,"a"),
paste(1:12,"b"))
row.names(todas_as_ordens) <- c(paste(1:12,"a"),
paste(1:12,"b"))
View(todas_as_ordens)
row.names(todas_as_ordens) <- c(paste0(1:12,"a"),
paste0(1:12,"b"))
View(todas_as_ordens)
# ------------------------------------------------------------------------------
# Exportar ordens
write.csv2(todas_as_ordens,"todas_as_ordens.csv")
# ------------------------------------------------------------------------------
# Exportar ordens
write.csv2(todas_as_ordens,"todas_as_ordens.csv")
View(todas_as_ordens)
